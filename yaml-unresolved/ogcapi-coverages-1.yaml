openapi: 3.0.3
info:
  title: 'A sample API conforming to the OGC API - Coverages - Part 1: Core standard'
  description: 'This is a sample OpenAPI definition that conforms to the OGC API - Coverages - Part 1: Core Service specification (conformance classes: "GeoData-Coverage", "Coverage Subset", "CIS JSON", "HTML" and "OpenAPI 3.0").'
  contact:
    name: EOX IT Services GmbH
    url: https://eox.at
    email: office@eox.at
  license:
    name: CC-BY 4.0 license
    url: https://creativecommons.org/licenses/by/4.0/
  version: 2.0.0
servers:
  - url: https://dev.example.org
    description: Development server
  - url: https://data.example.org
    description: Production server
tags:
  - name: Capabilities
    description: Essential characteristics of this API including information about the data.
  - name: Coverage
    description: Access to data (coverage).
paths:
  /:
    get:
      tags:
        - Capabilities
      summary: landing page of this API
      description: The landing page provides links to the API definition, the Conformance
        statements and the metadata about the coverage data in this dataset.
      operationId: getLandingPage
      parameters:
        - $ref: 'parameters/common-core/parameters.yaml#/f'
      responses:
        '200':
          description: links to the API capabilities
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/landingPage.yaml'
            text/html:
              schema:
                type: string
  /api:
    get:
      tags:
        - Capabilities
      summary: API definition
      description: most likely returning the document at hand
      operationId: getApiDefinition
      parameters:
        - $ref: 'parameters/common-core/parameters.yaml#/f'
      responses:
        '200':
          description: most likely returning the document at hand
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
  /conformance:
    get:
      tags:
        - Capabilities
      summary: API conformance definition
      description: list of all conformance classes that the server conforms to
      operationId: getCapabilities
      parameters:
        - $ref: 'parameters/common-core/parameters.yaml#/f'
      responses:
        '200':
          description: The URIs of all conformance classes supported by the server
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas/common-core/confClasses.yaml'
                example:
                  conformsTo:
                    - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core
                    - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json
                    - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html
                    - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas3
                    - http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/geodata
                    - http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/geodata-coverage
                    - http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/cisjson
                    - http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/html
                    - http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/coverage-subset
                    - http://www.opengis.net/spec/ogcapi-coverages-1/1.0/conf/oas30
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
  /collections:
    get:
      tags:
        - Capabilities
      summary: describe the collections in the dataset
      description: list of all collections available from the server
      operationId: describeCollections
      parameters:
        - $ref: 'parameters/common-core/parameters.yaml#/limit'
        - $ref: 'parameters/common-core/parameters.yaml#/bbox'
        - $ref: 'parameters/common-core/parameters.yaml#/datetime'
        - $ref: 'parameters/common-core/parameters.yaml#/f'
      responses:
        '200':
          description: Metdata about the collections shared by this API.
          content:
            application/json:
              schema:
                $ref: 'schemas/coverages-core/collections.yaml'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
            text/html:
              schema:
                type: string
  /collections/{coverageid}:
    get:
      tags:
      - Capabilities
      summary: Collection Information is the set of metadata which describes a single collection, or in the the case of OGCAPI-Coverages, a single Coverage.
      description: description of the collection identified with coverageid
      operationId: describeCoverage
      parameters:
        - $ref: '#/components/parameters/coverageid'
      responses:
        '200':
          description: Metadata about the {coverageid} collection shared by this
            API.
          content:
            application/json:
              schema:
                $ref: 'schemas/coverages-core/collectionInfo.yaml'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
            text/html:
              schema:
                type: string
  /collections/{coverageid}/coverage:
    get:
      tags:
        - Coverage
      summary: Retrieve the coverage identified by {coverageid}
      description: |-
        Coverage identified by {coverageid}.
        Use content negotiation to request required format.
      operationId: getCoverage
      parameters:
        - $ref: '#/components/parameters/coverageid'
        - $ref: '#/components/parameters/subset'
        - $ref: '#/components/parameters/rangeSubset'
        - $ref: '#/components/parameters/scaleFactor'
        - $ref: '#/components/parameters/scaleAxis'
        - $ref: '#/components/parameters/scaleSize'
        - $ref: '#/components/parameters/scaleExtent'
        - $ref: '#/components/parameters/subsettingCrs'
        - $ref: '#/components/parameters/outputCrs'
        - $ref: '#/components/parameters/interpolation'
      responses:
        '200':
          description: A full coverage.
          content:
            application/json:
              schema:
                $ref: 'schemas/cis/coverage-schema.yaml'
            application/multipart+related:
              schema:
                $ref: '#/components/schemas/coverageMultipart'
            image/*:
              schema:
                $ref: '#/components/schemas/coverageImage'
            application/*:
              schema:
                $ref: '#/components/schemas/coverageImage'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
            text/html:
              schema:
                type: string
  /collections/{coverageid}/coverage/domainset:
    get:
      tags:
        - Coverage
      summary: Retrieve a coverage's domainset; use content negotiation to request HTML or JSON
      description: a coverage's domainset
      operationId: getCoverageDomainSet
      parameters:
        - $ref: '#/components/parameters/coverageid'
        - $ref: '#/components/parameters/subset'
      responses:
        '200':
          description: A coverages domainset.
          content:
            application/json:
              schema:
                $ref: 'schemas/cis/domainSet.yaml'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
            text/html:
              schema:
                type: string
  /collections/{coverageid}/coverage/rangetype:
    get:
      tags:
        - Coverage
      summary: Retrieve a coverage's rangetype; use content negotiation to request HTML or JSON
      description: a coverage's rangetype
      operationId: getCoverageRangeType
      parameters:
        - $ref: '#/components/parameters/coverageid'
      responses:
        '200':
          description: A coverage's rangetype.
          content:
            application/json:
              schema:
                $ref: 'schemas/cis/rangeType.yaml'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
            text/html:
              schema:
                type: string
  /collections/{coverageid}/coverage/rangeset:
    get:
      tags:
      - Coverage
      summary: Retrieve a coverage's rangeset; use content negotiation to request HTML or JSON
      description: a coverage's rangeset
      operationId: getCoverageRangeSet
      parameters:
        - $ref: '#/components/parameters/coverageid'
        - $ref: '#/components/parameters/subset'
      responses:
        '200':
          description: A coverage's range set.
          content:
            application/json:
              schema:
                $ref: 'schemas/cis/rangeSet.yaml'
            image/*:
              schema:
                $ref: '#/components/schemas/rangeSetImage'
            application/*:
              schema:
                $ref: '#/components/schemas/rangeSetImage'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
            text/html:
              schema:
                type: string
  /collections/{coverageid}/coverage/metadata:
    get:
      tags:
      - Coverage
      summary: retrieve a coverage's metadata; use content negotiation to request
        HTML or GeoJSON
      description: a coverage's metadata
      operationId: getCoverageMetadata
      parameters:
        - $ref: '#/components/parameters/coverageid'
      responses:
        '200':
          description: A coverage's metadata.
          content:
            application/json:
              schema:
                $ref: 'schemas/cis/metadata.yaml'
            text/html:
              schema:
                type: string
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: 'schemas/common-core/exception.yaml'
            text/html:
              schema:
                type: string
components:
  schemas:
    coverageMultipart:
      type: string
      description: TODO
      example: TODO
    coverageImage:
      type: string
      description: TODO
      example: TODO
    rangeSetImage:
      type: string
      description: TODO
      example: TODO
  parameters:
    coverageid:
      name: coverageid
      in: path
      description: Identifier (name) of a specific collection aka coverage
      required: true
      style: simple
      explode: false
      schema:
        type: string
    subset:
      name: subset
      in: query
      description: get a subset of the coverage by slicing or trimming among one axis
      required: false
      style: form
      explode: true
      schema:
        type: string
    rangeSubset:
      name: rangeSubset
      in: query
      description: subset the resulting coverage by choosing and/or rearrange particular
        fields
      required: false
      style: form
      explode: true
      schema:
        type: string
    scaleFactor:
      name: scaleFactor
      in: query
      description: scale the resulting coverage either among all axes by a given factor
      required: false
      style: form
      explode: true
      schema:
        type: string
    scaleAxis:
      name: scaleAxis
      in: query
      description: scale the resulting coverage either among one axis by a given factor
      required: false
      style: form
      explode: true
      schema:
        type: string
    scaleSize:
      name: scaleSize
      in: query
      description: scale the resulting coverage either among one axis to a given size
      required: false
      style: form
      explode: true
      schema:
        type: string
    scaleExtent:
      name: scaleExtent
      in: query
      description: scale the resulting coverage either among one axis to a given extent
      required: false
      style: form
      explode: true
      schema:
        type: string
    subsettingCrs:
      name: subsettingcrs
      in: query
      description: specify the projection in which the subsets are expressed
      required: false
      style: form
      explode: true
      schema:
        type: string
    outputCrs:
      name: outputcrs
      in: query
      description: reproject the output coverage to the given
      required: false
      style: form
      explode: true
      schema:
        type: string
    interpolation:
      name: interpolation
      in: query
      description: specify the interpolation method used during reprojection and scaling
      required: false
      style: form
      explode: true
      schema:
        type: string
